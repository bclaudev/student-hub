{"ast":null,"code":"//handleRegistration.js\nconst handleRegistration = async (e, formData, setNotification) => {\n  e.preventDefault(); // Prevent default form submission behavior\n\n  try {\n    const response = await fetch('http://localhost:4000/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData) // Send formData as JSON\n    });\n    const data = await response.json();\n    if (response.ok) {\n      setNotification({\n        message: 'Registration successful!',\n        borderColor: '#474747',\n        bgColor: '#F2F2F2',\n        textColor: '#2E2E2E'\n      });\n      console.log('User registered:', data);\n    } else {\n      setNotification({\n        message: data.message || 'Registration failed.',\n        borderColor: '#8D0C0C',\n        bgColor: '#E3D8D8',\n        textColor: '#6A0202'\n      });\n    }\n  } catch (error) {\n    console.error('Error during registration:', error);\n    setNotification({\n      message: 'An error occurred. Please try again.',\n      borderColor: '#8D0C0C',\n      bgColor: '#E3D8D8',\n      textColor: '#6A0202'\n    });\n  }\n};","map":{"version":3,"names":["handleRegistration","e","formData","setNotification","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","borderColor","bgColor","textColor","console","log","error"],"sources":["D:/Projects/student-hub/frontend/src/pages/CreateAccountPage/handleRegistration.js"],"sourcesContent":["//handleRegistration.js\r\nconst handleRegistration = async (e, formData, setNotification) => {\r\n    e.preventDefault(); // Prevent default form submission behavior\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:4000/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData), // Send formData as JSON\r\n      });\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (response.ok) {\r\n        setNotification({\r\n          message: 'Registration successful!',\r\n          borderColor: '#474747',\r\n          bgColor: '#F2F2F2',\r\n          textColor: '#2E2E2E',\r\n        });\r\n        console.log('User registered:', data);\r\n      } else {\r\n        setNotification({\r\n          message: data.message || 'Registration failed.',\r\n          borderColor: '#8D0C0C',\r\n          bgColor: '#E3D8D8',\r\n          textColor: '#6A0202',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during registration:', error);\r\n      setNotification({\r\n        message: 'An error occurred. Please try again.',\r\n        borderColor: '#8D0C0C',\r\n        bgColor: '#E3D8D8',\r\n        textColor: '#6A0202',\r\n      });\r\n    }\r\n  };\r\n  "],"mappings":"AAAA;AACA,MAAMA,kBAAkB,GAAG,MAAAA,CAAOC,CAAC,EAAEC,QAAQ,EAAEC,eAAe,KAAK;EAC/DF,CAAC,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEpB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,CAAE;IAClC,CAAC,CAAC;IAEF,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACfX,eAAe,CAAC;QACdY,OAAO,EAAE,0BAA0B;QACnCC,WAAW,EAAE,SAAS;QACtBC,OAAO,EAAE,SAAS;QAClBC,SAAS,EAAE;MACb,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAER,IAAI,CAAC;IACvC,CAAC,MAAM;MACLT,eAAe,CAAC;QACdY,OAAO,EAAEH,IAAI,CAACG,OAAO,IAAI,sBAAsB;QAC/CC,WAAW,EAAE,SAAS;QACtBC,OAAO,EAAE,SAAS;QAClBC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDlB,eAAe,CAAC;MACdY,OAAO,EAAE,sCAAsC;MAC/CC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE,SAAS;MAClBC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}